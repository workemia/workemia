import { 
  DocsH1, DocsH2, DocsH3, DocsP, DocsUL, DocsOL, DocsLI, 
  DocsCode, DocsPreCode, DocsStrong, DocsHR, DocsBadge
} from '@/components/docs/docs-styles'

function TaskSection({
  title,
  status,
  priority,
  tasks,
  files
}: {
  title: string
  status: 'completed' | 'partial' | 'pending'
  priority: 'P0' | 'P1' | 'P2' | 'P3'
  tasks: Array<{
    name: string
    completed: boolean
    subtasks: Array<{ name: string; completed: boolean }>
  }>
  files?: string[]
}) {
  const statusBadges = {
    completed: <DocsBadge type="ok">‚úÖ Funcional e robusto</DocsBadge>,
    partial: <DocsBadge type="warn">‚ö†Ô∏è Parcialmente implementado</DocsBadge>,
    pending: <DocsBadge type="error">‚ùå N√£o implementado</DocsBadge>
  }

  const priorityBadges = {
    P0: <DocsBadge type="error">P0 - Cr√≠tica</DocsBadge>,
    P1: <DocsBadge type="warn">P1 - Alta</DocsBadge>,
    P2: <DocsBadge type="info">P2 - M√©dia</DocsBadge>,
    P3: <DocsBadge type="info">P3 - Baixa</DocsBadge>
  }

  return (
    <div className="mb-8">
      <DocsH3>{title}</DocsH3>
      <DocsP>
        <DocsStrong>Status</DocsStrong>: {statusBadges[status]}<br />
        <DocsStrong>Prioridade</DocsStrong>: {priorityBadges[priority]}
      </DocsP>

      <DocsUL>
        {tasks.map((task, index) => (
          <DocsLI key={index}>
            <DocsP>
              [{task.completed ? 'x' : ' '}] <DocsStrong>{task.name}</DocsStrong>
            </DocsP>
            {task.subtasks.length > 0 && (
              <DocsUL>
                {task.subtasks.map((subtask, subIndex) => (
                  <DocsLI key={subIndex}>
                    {subtask.completed ? '‚úÖ' : '[ ]'} {subtask.name}
                  </DocsLI>
                ))}
              </DocsUL>
            )}
          </DocsLI>
        ))}
      </DocsUL>

      {files && (
        <>
          <DocsP><DocsStrong>Arquivos para criar/modificar</DocsStrong>:</DocsP>
          <DocsUL>
            {files.map((file, index) => (
              <DocsLI key={index}><DocsCode>{file}</DocsCode></DocsLI>
            ))}
          </DocsUL>
        </>
      )}
    </div>
  )
}

export default function TodoPage() {
  return (
    <>
      <DocsH1>Workemia - Lista de Tarefas Completa</DocsH1>
      
      <DocsH2>üéØ Vis√£o Geral</DocsH2>
      <DocsP>
        Workemia √© uma plataforma de marketplace de servi√ßos que conecta clientes a prestadores. Esta lista organiza as tarefas necess√°rias para tornar a plataforma completamente funcional.
      </DocsP>

      <DocsHR />

      <DocsH2>üî¥ <DocsStrong>CR√çTICO - Funcionalidades Essenciais</DocsStrong></DocsH2>

      <TaskSection
        title="1. Sistema de Solicita√ß√£o de Servi√ßos"
        status="pending"
        priority="P0"
        tasks={[
          {
            name: "Criar formul√°rio de solicita√ß√£o de servi√ßo",
            completed: false,
            subtasks: [
              { name: "Sele√ß√£o de categoria", completed: false },
              { name: "Descri√ß√£o detalhada", completed: false },
              { name: "Localiza√ß√£o e endere√ßo", completed: false },
              { name: "Data/hora preferencial", completed: false },
              { name: "Budget estimado", completed: false },
              { name: "Upload de imagens/documentos", completed: false }
            ]
          },
          {
            name: "Sistema de propostas dos prestadores",
            completed: false,
            subtasks: [
              { name: "Recebimento de solicita√ß√µes por localiza√ß√£o", completed: false },
              { name: "Formul√°rio de proposta com pre√ßo", completed: false },
              { name: "Tempo estimado de execu√ß√£o", completed: false },
              { name: "Disponibilidade de hor√°rios", completed: false }
            ]
          },
          {
            name: "Fluxo de aceita√ß√£o/rejei√ß√£o",
            completed: false,
            subtasks: [
              { name: "Cliente visualiza propostas recebidas", completed: false },
              { name: "Sistema de compara√ß√£o de propostas", completed: false },
              { name: "Notifica√ß√µes em tempo real", completed: false },
              { name: "Aceitar/rejeitar propostas", completed: false }
            ]
          }
        ]}
        files={[
          "app/solicitar-servico/page.tsx",
          "app/propostas/page.tsx",
          "components/service-request-form.tsx",
          "components/proposal-card.tsx"
        ]}
      />

      <TaskSection
        title="2. Sistema de Pagamentos"
        status="pending"
        priority="P0"
        tasks={[
          {
            name: "Integra√ß√£o com gateway de pagamento",
            completed: false,
            subtasks: [
              { name: "Configurar Stripe/PagSeguro/Mercado Pago", completed: false },
              { name: "Processar pagamentos via PIX/Cart√£o", completed: false },
              { name: "Valida√ß√£o de transa√ß√µes", completed: false }
            ]
          },
          {
            name: "Sistema de escrow (pagamento seguro)",
            completed: false,
            subtasks: [
              { name: "Reter pagamento at√© conclus√£o do servi√ßo", completed: false },
              { name: "Sistema de libera√ß√£o por aprova√ß√£o", completed: false },
              { name: "Prote√ß√£o contra fraudes", completed: false }
            ]
          },
          {
            name: "Gest√£o financeira",
            completed: false,
            subtasks: [
              { name: "Hist√≥rico de transa√ß√µes", completed: false },
              { name: "Relat√≥rios financeiros", completed: false },
              { name: "Sistema de reembolsos", completed: false },
              { name: "Taxa da plataforma", completed: false }
            ]
          }
        ]}
        files={[
          "app/pagamento/page.tsx",
          "lib/payments/stripe.ts",
          "components/payment-form.tsx",
          "app/api/payments/route.ts"
        ]}
      />

      <TaskSection
        title="3. Sistema de Autentica√ß√£o ‚úÖ CONCLU√çDO"
        status="completed"
        priority="P0"
        tasks={[
          {
            name: "Limpeza de c√≥digo legacy",
            completed: true,
            subtasks: [
              { name: "Remover refer√™ncias ao Firebase", completed: true },
              { name: "Consolidar apenas Supabase Auth", completed: true },
              { name: "Limpar imports e depend√™ncias n√£o utilizadas", completed: true },
              { name: "Criado hook useAuth centralizado", completed: true }
            ]
          },
          {
            name: "Core de autentica√ß√£o implementado",
            completed: true,
            subtasks: [
              { name: "Cadastro funcional (cliente/prestador)", completed: true },
              { name: "Login com Supabase Auth", completed: true },
              { name: "Menu de usu√°rio no header completo", completed: true },
              { name: "Logout funcional em toda aplica√ß√£o", completed: true },
              { name: "Sistema de tipos de usu√°rio (client/provider)", completed: true }
            ]
          },
          {
            name: "Interface de autentica√ß√£o",
            completed: true,
            subtasks: [
              { name: "Header com dropdown de usu√°rio", completed: true },
              { name: "Avatar din√¢mico com iniciais", completed: true },
              { name: "Toggle de tema integrado", completed: true },
              { name: "Menu responsivo (desktop + mobile)", completed: true },
              { name: "Redirecionamento baseado no tipo de usu√°rio", completed: true }
            ]
          }
        ]}
        files={[
          "hooks/use-auth.ts (criado)",
          "components/theme-toggle.tsx (criado)",
          "components/header.tsx (refatorado)",
          "app/cadastro/page.tsx (corrigido)",
          "app/layout.tsx (corrigido hidrata√ß√£o)"
        ]}
      />

      <DocsHR />

      <DocsH2>üü° <DocsStrong>ALTA PRIORIDADE - Funcionalidades Principais</DocsStrong></DocsH2>

      <TaskSection
        title="4. Sistema de Avalia√ß√µes e Reviews"
        status="pending"
        priority="P1"
        tasks={[
          {
            name: "Interface de avalia√ß√£o",
            completed: false,
            subtasks: [
              { name: "Sistema de estrelas (1-5)", completed: false },
              { name: "Coment√°rios detalhados", completed: false },
              { name: "Upload de fotos do resultado", completed: false },
              { name: "Avalia√ß√£o m√∫tua (cliente ‚Üî prestador)", completed: false }
            ]
          },
          {
            name: "Gest√£o de reviews",
            completed: false,
            subtasks: [
              { name: "Hist√≥rico de avalia√ß√µes", completed: false },
              { name: "C√°lculo de rating m√©dio", completed: false },
              { name: "Sistema anti-spam", completed: false },
              { name: "Relat√≥rio de reviews inadequados", completed: false }
            ]
          }
        ]}
        files={[
          "components/rating-system.tsx (expandir)",
          "app/avaliacoes/page.tsx",
          "components/review-form.tsx"
        ]}
      />

      <TaskSection
        title="6. Sistema de Mensagens Real-time"
        status="partial"
        priority="P1"
        tasks={[
          {
            name: "Interface base implementada",
            completed: true,
            subtasks: [
              { name: "Interface de chat criada e integrada no header", completed: true },
              { name: "Componente NotificationCenter funcional", completed: true },
              { name: "Links de redirecionamento para /chat", completed: true }
            ]
          },
          {
            name: "Backend de mensagens",
            completed: false,
            subtasks: [
              { name: "Armazenamento no Supabase", completed: false },
              { name: "WebSocket/Real-time subscriptions", completed: false },
              { name: "Notifica√ß√µes push", completed: false }
            ]
          }
        ]}
        files={[
          "app/chat/page.tsx (conectar ao backend)",
          "app/api/messages/route.ts (criar)",
          "lib/realtime.ts (criar)"
        ]}
      />

      <DocsHR />

      <DocsH2>üìä <DocsStrong>RESUMO DE PRIORIDADES</DocsStrong></DocsH2>

      <DocsH3>Sprint 1 (2-3 semanas) - MVP Funcional</DocsH3>
      <DocsOL>
        <DocsLI>Sistema de solicita√ß√£o de servi√ßos</DocsLI>
        <DocsLI>Sistema de propostas</DocsLI>
        <DocsLI>‚úÖ <del>Corre√ß√µes de autentica√ß√£o</del> <DocsStrong>CONCLU√çDO</DocsStrong></DocsLI>
      </DocsOL>

      <DocsH3>Sprint 2 (2-3 semanas) - Plataforma Operacional</DocsH3>
      <DocsOL>
        <DocsLI>Sistema de pagamentos</DocsLI>
        <DocsLI>Reviews/avalia√ß√µes</DocsLI>
        <DocsLI>Mensagens real-time</DocsLI>
      </DocsOL>

      <DocsH3>Sprint 3 (2-3 semanas) - Experi√™ncia Completa</DocsH3>
      <DocsOL>
        <DocsLI>Agendamento/calend√°rio</DocsLI>
        <DocsLI>Upload de arquivos</DocsLI>
        <DocsLI>Performance optimization</DocsLI>
      </DocsOL>

      <DocsHR />

      <DocsH3>‚úÖ <DocsStrong>PRINCIPAIS CONQUISTAS DESTA SESS√ÉO</DocsStrong>:</DocsH3>
      <DocsOL>
        <DocsLI><DocsStrong>Sistema de Autentica√ß√£o Completo</DocsStrong> - 100% funcional</DocsLI>
        <DocsLI><DocsStrong>Corre√ß√£o de Bugs Cr√≠ticos</DocsStrong> - Hidrata√ß√£o, cadastro, avatar</DocsLI>
        <DocsLI><DocsStrong>Arquitetura de Perfil Unificada</DocsStrong> - Elimina√ß√£o de redund√¢ncia</DocsLI>
        <DocsLI><DocsStrong>Interface Moderna</DocsStrong> - Header com menu completo + dark mode</DocsLI>
        <DocsLI><DocsStrong>Base T√©cnica S√≥lida</DocsStrong> - Hook <DocsCode>useAuth</DocsCode>, componentes organizados</DocsLI>
      </DocsOL>

      <DocsP>
        <DocsStrong>√öltima atualiza√ß√£o</DocsStrong>: 2025-01-06<br />
        <DocsStrong>Status do projeto</DocsStrong>: üü¢ Base s√≥lida estabelecida<br />
        <DocsStrong>Cobertura de funcionalidades</DocsStrong>: ~40% implementado
      </DocsP>

      <DocsP>
        Este roadmap deve ser revisado quinzenalmente conforme o progresso do desenvolvimento.
      </DocsP>
    </>
  )
}