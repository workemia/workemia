name: CI/CD Pipeline - ServiceHub

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '20'
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

jobs:
  # Job de Seguran√ßa e Verifica√ß√µes
  security:
    name: üîí Security & Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Security Audit
        run: npm audit --audit-level moderate

      - name: Check for vulnerabilities
        run: npx audit-ci --moderate || echo "‚ö†Ô∏è Vulnerability check completed with warnings"
        continue-on-error: true

      - name: License Check
        run: npx license-checker --onlyAllow 'MIT;Apache-2.0;BSD-2-Clause;BSD-3-Clause;ISC' || echo "‚ö†Ô∏è License check completed with warnings"
        continue-on-error: true

  # Job de Qualidade de C√≥digo
  code-quality:
    name: üîç Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: TypeScript Check
        run: npx tsc --noEmit

      - name: ESLint
        run: npm run lint

      - name: Prettier Check
        run: npx prettier --check "**/*.{js,jsx,ts,tsx,json,css,md}"

      - name: Bundle Analysis
        run: |
          npm run build
          npx @next/bundle-analyzer

  # Job de Testes
  test:
    name: üß™ Tests
    runs-on: ubuntu-latest
    needs: [security, code-quality]
    strategy:
      matrix:
        test-type: [unit, integration, e2e]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Run Unit Tests
        if: matrix.test-type == 'unit'
        run: npm run test:unit
        env:
          CI: true

      - name: Run Integration Tests
        if: matrix.test-type == 'integration'
        run: npm run test:integration
        env:
          CI: true
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}

      - name: Run E2E Tests
        if: matrix.test-type == 'e2e'
        run: npm run test:e2e
        env:
          CI: true

      - name: Upload Coverage
        if: matrix.test-type == 'unit'
        uses: codecov/codecov-action@v3

  # Job de Build
  build:
    name: üèóÔ∏è Build
    runs-on: ubuntu-latest
    needs: [test]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Build application
        run: npm run build
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-files
          path: .next/
          retention-days: 1

  # Job de Deploy para Staging (develop branch)
  deploy-staging:
    name: üöÄ Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build Project Artifacts
        run: vercel build --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy Project Artifacts to Vercel
        id: deploy
        run: |
          url=$(vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }})
          echo "preview_url=$url" >> $GITHUB_OUTPUT

      - name: Comment PR with Preview URL
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'üöÄ **Preview Deploy:** ${{ steps.deploy.outputs.preview_url }}'
            })

  # Job de Deploy para Produ√ß√£o (main branch)
  deploy-production:
    name: üåü Deploy to Production
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build Project Artifacts
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy Project Artifacts to Vercel
        id: deploy
        run: |
          url=$(vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }})
          echo "production_url=$url" >> $GITHUB_OUTPUT

      - name: Run Smoke Tests on Production
        run: |
          npm ci
          npm run test:smoke
        env:
          PRODUCTION_URL: ${{ steps.deploy.outputs.production_url }}

  # Job de Post-Deploy Monitoring
  post-deploy:
    name: üìä Post-Deploy Monitoring
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Lighthouse CI
        uses: treosh/lighthouse-ci-action@v9
        with:
          urls: |
            https://servicehub.vercel.app
          configPath: './.lighthouserc.json'
          uploadArtifacts: true
          temporaryPublicStorage: true

      # - name: Notify Success
      #   uses: 8398a7/action-slack@v3
      #   with:
      #     status: success
      #     channel: '#deployments'
      #     text: '‚úÖ ServiceHub deployed successfully to production!'
      #   env:
      #     SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      # - name: Notify Failure
      #   if: failure()
      #   uses: 8398a7/action-slack@v3
      #   with:
      #     status: failure
      #     channel: '#deployments'
      #     text: '‚ùå ServiceHub deployment failed!'
      #   env:
      #     SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}