name: CI/CD Notifications

on:
  workflow_run:
    workflows: ["CI/CD Pipeline", "Security Scan"]
    types:
      - completed

jobs:
  notification:
    runs-on: ubuntu-latest
    steps:      
      - name: Email notification on failure
        if: github.event.workflow_run.conclusion == 'failure'
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 587
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: "ðŸš¨ ServiceHub CI/CD Pipeline Failed"
          to: ${{ secrets.EMAIL_TO }}
          from: ServiceHub CI/CD <${{ secrets.EMAIL_USERNAME }}>
          body: |
            The CI/CD pipeline for ServiceHub has failed.
            
            Repository: ${{ github.repository }}
            Workflow: ${{ github.event.workflow_run.name }}
            Branch: ${{ github.event.workflow_run.head_branch }}
            Commit: ${{ github.event.workflow_run.head_sha }}
            Author: ${{ github.event.workflow_run.head_commit.author.name }}
            
            Please check the workflow run: ${{ github.event.workflow_run.html_url }}

  deployment-status:
    runs-on: ubuntu-latest
    if: github.event.workflow_run.name == 'CI/CD Pipeline'
    steps:
      - name: Update deployment status
        uses: actions/github-script@v8
        with:
          script: |
            const { data: deployments } = await github.rest.repos.listDeployments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: '${{ github.event.workflow_run.head_sha }}',
              per_page: 1
            });

            if (deployments.length > 0) {
              const deployment = deployments[0];
              const state = '${{ github.event.workflow_run.conclusion }}' === 'success' ? 'success' : 'failure';
              
              await github.rest.repos.createDeploymentStatus({
                owner: context.repo.owner,
                repo: context.repo.repo,
                deployment_id: deployment.id,
                state: state,
                description: `Deployment ${state} for ServiceHub`,
                environment_url: state === 'success' ? `https://${process.env.VERCEL_URL}` : undefined
              });
            }