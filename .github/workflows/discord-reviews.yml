name: Discord PR Review Notifications

on:
  pull_request_review:
    types: [submitted]
  pull_request_review_comment:
    types: [created]

jobs:
  notify-review:
    runs-on: ubuntu-latest
    
    steps:
    - name: Notify PR Review
      if: github.event_name == 'pull_request_review'
      run: |
        # Definir cor e emoji baseado no estado do review
        case "${{ github.event.review.state }}" in
          "approved")
            color=5814783  # Verde
            emoji="✅"
            action_pt="aprovou"
            ;;
          "changes_requested")
            color=15158332  # Vermelho
            emoji="🔴"
            action_pt="solicitou mudanças em"
            ;;
          "commented")
            color=16753920  # Laranja
            emoji="💬"
            action_pt="comentou em"
            ;;
          *)
            color=7506394  # Cinza
            emoji="📝"
            action_pt="revisou"
            ;;
        esac
        
        # Limitar comentário a 200 caracteres
        review_body="${{ github.event.review.body }}"
        if [ ${#review_body} -gt 200 ]; then
          review_body="${review_body:0:200}..."
        fi
        
        cat > /tmp/discord_payload.json << EOF
        {
          "embeds": [{
            "title": "${emoji} Review de PR",
            "description": "**${{ github.event.review.user.login }}** ${action_pt} a PR [#${{ github.event.pull_request.number }} - ${{ github.event.pull_request.title }}](${{ github.event.pull_request.html_url }})\n\n${review_body}",
            "color": ${color},
            "fields": [
              {
                "name": "Estado do Review",
                "value": "${{ github.event.review.state }}",
                "inline": true
              },
              {
                "name": "Branch",
                "value": "\`${{ github.event.pull_request.head.ref }}\` → \`${{ github.event.pull_request.base.ref }}\`",
                "inline": true
              }
            ],
            "author": {
              "name": "${{ github.event.review.user.login }}",
              "icon_url": "${{ github.event.review.user.avatar_url }}"
            },
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%S.000Z)"
          }]
        }
        EOF
        
        curl -H "Content-Type: application/json" -X POST -d @/tmp/discord_payload.json "${{ secrets.DISCORD_WEBHOOK_URL }}"

    - name: Notify Review Comment
      if: github.event_name == 'pull_request_review_comment'
      run: |
        # Limitar comentário a 300 caracteres
        comment_body="${{ github.event.comment.body }}"
        if [ ${#comment_body} -gt 300 ]; then
          comment_body="${comment_body:0:300}..."
        fi
        
        cat > /tmp/discord_payload.json << EOF
        {
          "embeds": [{
            "title": "💬 Novo comentário em PR",
            "description": "**${{ github.event.comment.user.login }}** comentou na PR [#${{ github.event.pull_request.number }} - ${{ github.event.pull_request.title }}](${{ github.event.comment.html_url }})\n\n\`\`\`\n${comment_body}\n\`\`\`",
            "color": 16753920,
            "fields": [
              {
                "name": "Arquivo",
                "value": "\`${{ github.event.comment.path }}\`",
                "inline": true
              },
              {
                "name": "Linha",
                "value": "${{ github.event.comment.line }}",
                "inline": true
              }
            ],
            "author": {
              "name": "${{ github.event.comment.user.login }}",
              "icon_url": "${{ github.event.comment.user.avatar_url }}"
            },
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%S.000Z)"
          }]
        }
        EOF
        
        curl -H "Content-Type: application/json" -X POST -d @/tmp/discord_payload.json "${{ secrets.DISCORD_WEBHOOK_URL }}"

    - name: Cleanup
      if: always()
      run: |
        rm -f /tmp/discord_payload.json
