name: Production Monitoring

on:
  schedule:
    # Run every 15 minutes
    - cron: '*/15 * * * *'
  workflow_dispatch:

jobs:
  health-check:
    runs-on: ubuntu-latest
    steps:
      - name: Check production health
        run: |
          echo "Checking production health..."
          response=$(curl -s -o /dev/null -w "%{http_code}" https://${{ secrets.PRODUCTION_URL }}/api/health)
          
          if [ $response -eq 200 ]; then
            echo "✅ Production is healthy"
          else
            echo "❌ Production health check failed with status: $response"
            exit 1
          fi

      - name: Check staging health
        run: |
          echo "Checking staging health..."
          response=$(curl -s -o /dev/null -w "%{http_code}" https://${{ secrets.STAGING_URL }}/api/health)
          
          if [ $response -eq 200 ]; then
            echo "✅ Staging is healthy"
          else
            echo "❌ Staging health check failed with status: $response"
            exit 1
          fi

      - name: Performance test
        run: |
          echo "Running performance test..."
          response_time=$(curl -s -o /dev/null -w "%{time_total}" https://${{ secrets.PRODUCTION_URL }})
          
          # Convert to milliseconds
          response_time_ms=$(echo "$response_time * 1000" | bc)
          
          echo "Response time: ${response_time_ms}ms"
          
          # Alert if response time > 3 seconds
          if (( $(echo "$response_time > 3.0" | bc -l) )); then
            echo "⚠️ Slow response time detected: ${response_time_ms}ms"
            exit 1
          fi

      - name: SSL certificate check
        run: |
          echo "Checking SSL certificate..."
          expiry=$(echo | openssl s_client -servername ${{ secrets.PRODUCTION_DOMAIN }} -connect ${{ secrets.PRODUCTION_DOMAIN }}:443 2>/dev/null | openssl x509 -noout -dates | grep notAfter | sed 's/notAfter=//')
          expiry_epoch=$(date -d "$expiry" +%s)
          current_epoch=$(date +%s)
          days_until_expiry=$(( (expiry_epoch - current_epoch) / 86400 ))
          
          echo "SSL certificate expires in $days_until_expiry days"
          
          if [ $days_until_expiry -lt 30 ]; then
            echo "⚠️ SSL certificate expires soon: $days_until_expiry days"
            exit 1
          fi

  lighthouse-audit:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install Lighthouse CI
        run: npm install -g @lhci/cli

      - name: Run Lighthouse CI
        run: lhci autorun
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

      - name: Upload Lighthouse results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: lighthouse-results
          path: .lighthouseci/

  security-monitoring:
    runs-on: ubuntu-latest
    steps:
      - name: Check security headers
        run: |
          echo "Checking security headers..."
          
          # Check for required security headers
          headers=(
            "x-frame-options"
            "x-content-type-options"
            "referrer-policy"
            "permissions-policy"
          )
          
          for header in "${headers[@]}"; do
            response=$(curl -s -I https://${{ secrets.PRODUCTION_URL }} | grep -i "$header")
            if [ -z "$response" ]; then
              echo "❌ Missing security header: $header"
              exit 1
            else
              echo "✅ Found security header: $header"
            fi
          done

      - name: Check for exposed sensitive endpoints
        run: |
          echo "Checking for exposed sensitive endpoints..."
          
          sensitive_endpoints=(
            "/.env"
            "/config"
            "/admin"
            "/.git"
            "/node_modules"
          )
          
          for endpoint in "${sensitive_endpoints[@]}"; do
            response=$(curl -s -o /dev/null -w "%{http_code}" https://${{ secrets.PRODUCTION_URL }}$endpoint)
            if [ $response -ne 404 ] && [ $response -ne 403 ]; then
              echo "⚠️ Potentially exposed endpoint: $endpoint (Status: $response)"
            else
              echo "✅ Endpoint properly protected: $endpoint"
            fi
          done

  database-monitoring:
    runs-on: ubuntu-latest
    steps:
      - name: Check database connectivity
        run: |
          echo "Checking database connectivity..."
          response=$(curl -s -o /dev/null -w "%{http_code}" https://${{ secrets.PRODUCTION_URL }}/api/health/database)
          
          if [ $response -eq 200 ]; then
            echo "✅ Database is accessible"
          else
            echo "❌ Database connectivity issue (Status: $response)"
            exit 1
          fi

      - name: Check API rate limits
        run: |
          echo "Testing API rate limits..."
          
          # Make multiple requests to test rate limiting
          for i in {1..10}; do
            response=$(curl -s -o /dev/null -w "%{http_code}" https://${{ secrets.PRODUCTION_URL }}/api/test)
            if [ $response -eq 429 ]; then
              echo "✅ Rate limiting is working (Request $i)"
              break
            elif [ $i -eq 10 ]; then
              echo "⚠️ Rate limiting may not be properly configured"
            fi
          done